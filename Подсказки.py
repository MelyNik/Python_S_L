
check_name  = 0 или ''
while check_name is False:             					# Запускам цикл, если check_name является False (т.е. пустой), то проваливаемся в цикл для повторного ввода. 






if excep.os.path.isfile(f'E:\Git\Pyton_S_L\Seminar\Lesson_8\{name_table}') is True: 				# Если путь E:\Git\Pyton_S_L\Seminar\Lesson_8\{name_table}
            											                                            # существует то будет True и проваливаемся в if, 
                                                                                                    # и сообщаем об ошибке, что такое имя уже есть.





list_book.write(f'{name_table}.csv\n') 					                    # Записываем и переходим на новую строку.



new_table.write('')                                                         # Записываем в файл просто пробел, так понимаю, что бы файл имел хоть какой-то вес и не 
                                                                            # считался в дальнейшем оршибкой.


os.remove(f'E:\Git\Pyton_S_L\Seminar\Lesson_8\{name_table}.csv')            # Если файл с путём E:\Git\Pyton_S_L\Seminar\Lesson_8\{name_table}.csv существует
                                                                            # то функцией os.remove он будет удалён,


lines = f_1.readlines()                                                     # Создаём список в переменную lines методом f_1.readlines() из строк файла f_1. 


print (f'\nСправочник "{line[:-5]}"\n')                                     # Вывод строки справочника от 0 до -5 (Видимо, что бы конце строки, что то не выводилось).


variable_dict = {}                                                          # Создаём пустой словарь.
variable_dict.clear()                                                       # Зачем то очистили пустой словарь.


card_list = []                                                              # Создаём пустой список который в дальнейшем будет хранить данные сотрудника.
card_list.clear()                                                           # Зачем то очищаем пустой список.


with open(f'E:\Git\Pyton_S_L\Seminar\Lesson_8\{str(*variable_dict[number_table])}','r', encoding='utf-8') as f_2:         # Таким образом можем открыть элемент словаря с конкретным индексом.



return variable_dict[number_table]                                          # Возвращаем элемент словаря (конкретную таблицу), что бы потом открыть.



def dictionary_data(key):                                                   # Запускаем функцию созданию карточки сотрудника, где key будет ключом в словаре.
    card_data = {1: "фамилию", 2: "имя", 3: "отчество", 4: "номер телефона",
                  5: "дату вступления в должность в формате ДД.ММ.ГГГГ", 6: "должность"} # Создали словарь с ключами и названиеми.
    return card_data.get(key)                                               # Возвращаем словарь и берём данные  key который совпадают с ключом из словаря card_data.
data = input(f'Введите {dictionary_data(i)}:\n')                            # Получается в переменную data присваивается ввод пользователя, и вызов функции словаря dictionary_data(i)
                                                                            # где i будет ключ.



card_list.append(line.split('-')[1][1:]) # Дабавляем подходящую строку в список тем самым завершая его.
                                         # В таблице должность указано всё с ключами например (1 - дизайнер), но нам нужно, что бы в карточку сотрудника попадало только  (дизайнер)
                                         # без (1 -), для этого мы сразу создали ещё один список в списке через split('-'), гдн разделителем будет '-', и у нас получился список
                                         # [1, дизайнер], и таким образом мы сообщили [1][1:], что из этого списка берём только элемент с индексом [1], и далее [1:].



card = [str(a) for a in data]                           # В переменную card записываем список из данных сотрудника одновременно преобразовав через цикл каждый элемент из списка в строку.
f_1.write(f'{",".join(card)}')                          # Записываем эти данные в справочник(таблицу) одновременно преобразовав весь список в строку и разделяя элементы ",".



name = name.lower()                                 # Переменной name присвоили те же данные, но переведя в нижний регистр, но это не нужно, так как следующая функция .capitalize() 
name = name.capitalize()                            # Переводит первую букву строки в верхний регистр.




global count_find_cont                              # Глобализируем переменную (счётчик) count_find_cont, что бы можно было исполььзовать её везде именно в этом контексте.
if count_find_cont !=1:                             # Если глобальная переменная больше чем 1 , то значит нашли несколько пользователей и просим уточнить запрос.


print(f"\033[32m {i} \033[39m")                     # Выводим i (все данные о найденном сотруднике) стилизированным образом.



if card_del == '':                                  # Если в переменной search будет пустое значение, значит сотрудник не найден и проваливаемся в if.




while not employee_id in employee.split(','):       # Если employee_id отсутствует в списке employee.split(',') данных пользовтеля сообщаем об ошибке.




if choice_change in [1,2,3,6]:                      # Если choice_change есть в списке [1,2,3,6] проваливаемся в if.



print(line[:-5])                                    # Выводим каждую строку файла длиной от 0 до -5.



for i in data:                                                  # Запускаем цикл переменной i проходя по списку  data.
                temp = i.split(',')                             #  В список temp добаляем первый элемент списка data. Т.е. в список temp добавили строку данных конкретного сотрудника.
                ident = temp[0]                                 # В переменную ident добавили элемент списка temp с индексом 0 ( это будет id).
                if ident == employee_id:                        # Если вводимый ранее id(employee_id) совпадает с ident, то проваливаемся в if.
                    temp[choice_change] = data_change           # В элемент списка с индексом choice_change добавляем новую информацию data_change.
                    line = [str(a) for a in temp]               # В список line комплектуем строками все элементы списка temp включая уже изменённый.
                    f_2.write(",".join(line))                   # Преобразуем список line строку отделяя элементы запятыми и записываем в файл f_2.
                    print (f'Данные о контрагенте сохранены в справочнике!') # Выводим сообщение, что данные сохранены.
                else:                                           # Иначе в этом элементе списка data мы не находим данные.
                    line = [str(a) for a in temp]               # В список line комплектуем строками все элементы списка.
                    f_2.write(",".join(line))                   # Преобразуем список line строку отделяя элементы запятыми и записываем в файл f_2.




                                                                # EXCEP Примеры.





import os
from datetime import datetime


def check_main_menu(quan):                                          # Функция на ошибки при вводе данных пользователя на главном меню.
    while True:                                                     # while True: try: except ValueError: Мне ещё не знакомы.
        try:
            number_menu = (input())                                 # К переменной number_menu присваивается число введённое пользвотелем на главном меню.
            while int(number_menu) not in range (1, quan):          # Првоерка, если число не в рендже от 1 до quan , то проваливаемся в цикл и просим ввести повторно.
                print ('\nНеверный ввод! Повторите ввод:') 
                number_menu = (input())
            return int(number_menu)                                 # Возвращаем подходящее число к переменной  number_main_menu в интерфейс.
        except ValueError:                                          # Если это вообще не число, то опять же просим ввести число повторно.
            print ('\nНеверный формат! Повторите ввод:')


def check_file(name_file):                                          # Смотрим файл.
    if os.path.exists(name_file):                # функцией os.path.exists(name_file) проверяем существует ли файл в переменной name_file, в переменной name_file присвоин путь файла.
        if os.path.getsize(name_file)>0:                            # Если вес файла больше 0 , то возвращаем True, иначе False.
            return True
        else:
            return False                         # Возвращаем False так как файл ни чего не весит и скорее всего пустой, а это тоже самое, что его нет (как я понял).
    else:
        return False                             # Возвращаем False если файла нет по данному пути name_file.


def check_name_table(name_table):                                   # Запускаем функцию проверки имени нового справочника (таблицы) на наличие ошибок ввода
    list_name_table = list(name_table)                              # В переменную list_name_table добавили список из элементов имени. Т.е. преобразовли текст в список.
    mistake_element = ['/','|','*','?','>','<',':','"','\\']        # Добавили в переменную mistake_element список знаков которые будем считать ошибками.
    for i in list_name_table:                                       # Проходим переменной i по всем элементам списка list_name_table, именно элементам, а не индексам.
        if i in mistake_element or len(name_table)<3:                  # Если элемет i из списка list_name_table есть в списке mistake_element 
                                                                # или длина строки переменной name_table короче 3, то проваливаемся в if и имя счетается не верным и возвращаем False.
            print ("Недопустимое название")
            return False
    return True                                                     # Если предыдущий цикл результата False не дал, то возвращаем True.


def phone(phone):                                                   # Запускаем функцию на проверку в номера телефона посторонних знаков, т.е. должны быть только цифры.
    num_for_write = ''.join([i for i in phone if i.isdigit()])      # К переменной num_for_write присваиваем номер телефона, но в строковом виде без пробелов
                                    # одновременно проверяя что каждый сивол строки это цифра и к переменной num_for_write присваиваем только цифры, пропуская любые другие символы.
    if len(num_for_write) > 3:                                      # Проваливаемся в if если длина номера больше 3.
        return True                                                 # Возвращаем  True при условии, что длина номера больше 3.
    else:                                                           # Иначе выводим сообщение, что номер телефона не подходит.
        print ("Неверный формат!")                                  # Выводим сообщение.
        return False                                                # И возвращаем False если номер телефона не подходит.

        
def check_data_employee(name):                                      # Запускаем функцию на проверку в фамилии посторонних знаков, т.е. должны быть только буквы.
    if name.isalpha() and len(name)>1:                  # Функцией .isalpha() проверяем, что в переменной name только буквы и длина строки больше 1, фамилии с одной буквой не будет.
        return True                                                 # Возвращаем True если фамилий корректна.
    else:
        return False                                                # Возвращаем False если фамилий не корректна.


def date(date_text):                                                # Запускаем функцию на проверку правильности вводу даты.
    try:                                                            # Првоерка на ошибку введённого формата даты.
        bool(datetime.strptime(date_text, '%d.%m.%Y'))              # bool возвращает True если утверждение (datetime.strptime(date_text, '%d.%m.%Y')) истина и False если нет.
    except ValueError:                                              # Если формат не верен, то возвращаем False
        print ("Неверный формат!")                                  # Выводим сообщение, что формат не верен.
        return False                                                # Возвращаем False







                                                                    # INTERFACE ПРИМЕР



  
def submenu_print_book():                                                   # Запускаем функцию вывода всех контрагентов.
                                                                            # Добавили подменю.
    print ('Выберите пункт меню:\n 1 - Вывести перечень всех справочников\n 2 - Главное меню\n 3 - Выход')
    number_submenu = excep.check_main_menu(4)                               # К переменой number_main_menu присволили функцию excep.check_main_menu(4) - ввод числа и выявление ошибки. 
                                                                            # где 4 это значение до которого ошибки ещё не будет.
    if number_submenu == 1:                                     # Если number_submenu == 1, то проваливаемся в if и вызываем функцию books.print_counterparty() для вывода контрагентов.
        books.print_counterparty()                                          # Выводим контрагентов или сообщаем об ошибке.
        completion_submenu()                                                # Запускаем подменю после вывода информации.
    elif number_submenu == 2:                                               # Если number_submenu == 2, то проваливаемся в elif и вызываем функцию main_menu() для выхода в главное меню.
        main_menu()                                                         # Запускаем главное меню.
        log.logger("Главное меню", data_description = "Переход")            # Запускаем logger
    else:
        completion_prog()                                                   # Запускаем функцию завершения работы с программой.   









                                                                            #LOGGER Пример.






from datetime import datetime as dt

                                                                            # Создали логирование.

def logger(data, data_description = "действие"):                            # Не понятно почему в переменную data_description сдесь добавлено "действие"

    time = dt.now().strftime('%d-%m-%Y %H:%M:%S') # К переменной time добавили дату и время в формате '%d-%m-%Y %H:%M:%S'
    with open('E:\Git\Pyton_S_L\Seminar\Lesson_8\logger.csv', 'a', encoding='utf-8') as file: # Открыли файл logger.csv для дозаписи, где logger.csv это называние файла и путь к нему.
        file.write('{}; {}; {}\n'
                    .format(time, data_description, data)) 
